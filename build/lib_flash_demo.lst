
build/lib_flash_demo.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	3f40006f          	j	3f4 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	000004b0          	.word	0x000004b0
   c:	00000464          	.word	0x00000464
	...
  30:	00000464          	.word	0x00000464
  34:	00000000          	.word	0x00000000
  38:	00000464          	.word	0x00000464
  3c:	00000000          	.word	0x00000000
  40:	00000464          	.word	0x00000464
  44:	00000464          	.word	0x00000464
  48:	00000464          	.word	0x00000464
  4c:	00000464          	.word	0x00000464
  50:	00000464          	.word	0x00000464
  54:	00000464          	.word	0x00000464
  58:	00000464          	.word	0x00000464
  5c:	00000464          	.word	0x00000464
  60:	00000464          	.word	0x00000464
  64:	00000464          	.word	0x00000464
  68:	00000464          	.word	0x00000464
  6c:	00000464          	.word	0x00000464
  70:	00000464          	.word	0x00000464
  74:	00000464          	.word	0x00000464
  78:	00000464          	.word	0x00000464
  7c:	00000464          	.word	0x00000464
  80:	00000464          	.word	0x00000464
  84:	00000464          	.word	0x00000464
  88:	00000464          	.word	0x00000464
  8c:	00000464          	.word	0x00000464
  90:	00000464          	.word	0x00000464
  94:	00000464          	.word	0x00000464
  98:	00000464          	.word	0x00000464
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__divsi3>:
  a0:	02054e63          	bltz	a0,dc <__umodsi3+0x8>
  a4:	0405c363          	bltz	a1,ea <__umodsi3+0x16>

000000a8 <__hidden___udivsi3>:
  a8:	862e                	mv	a2,a1
  aa:	85aa                	mv	a1,a0
  ac:	557d                	li	a0,-1
  ae:	c215                	beqz	a2,d2 <__hidden___udivsi3+0x2a>
  b0:	4685                	li	a3,1
  b2:	00b67863          	bgeu	a2,a1,c2 <__hidden___udivsi3+0x1a>
  b6:	00c05663          	blez	a2,c2 <__hidden___udivsi3+0x1a>
  ba:	0606                	slli	a2,a2,0x1
  bc:	0686                	slli	a3,a3,0x1
  be:	feb66ce3          	bltu	a2,a1,b6 <__hidden___udivsi3+0xe>
  c2:	4501                	li	a0,0
  c4:	00c5e463          	bltu	a1,a2,cc <__hidden___udivsi3+0x24>
  c8:	8d91                	sub	a1,a1,a2
  ca:	8d55                	or	a0,a0,a3
  cc:	8285                	srli	a3,a3,0x1
  ce:	8205                	srli	a2,a2,0x1
  d0:	faf5                	bnez	a3,c4 <__hidden___udivsi3+0x1c>
  d2:	8082                	ret

000000d4 <__umodsi3>:
  d4:	8286                	mv	t0,ra
  d6:	3fc9                	jal	a8 <__hidden___udivsi3>
  d8:	852e                	mv	a0,a1
  da:	8282                	jr	t0
  dc:	40a00533          	neg	a0,a0
  e0:	00b04763          	bgtz	a1,ee <__umodsi3+0x1a>
  e4:	40b005b3          	neg	a1,a1
  e8:	b7c1                	j	a8 <__hidden___udivsi3>
  ea:	40b005b3          	neg	a1,a1
  ee:	8286                	mv	t0,ra
  f0:	3f65                	jal	a8 <__hidden___udivsi3>
  f2:	40a00533          	neg	a0,a0
  f6:	8282                	jr	t0

000000f8 <__modsi3>:
  f8:	8286                	mv	t0,ra
  fa:	0005c763          	bltz	a1,108 <__modsi3+0x10>
  fe:	00054963          	bltz	a0,110 <__modsi3+0x18>
 102:	375d                	jal	a8 <__hidden___udivsi3>
 104:	852e                	mv	a0,a1
 106:	8282                	jr	t0
 108:	40b005b3          	neg	a1,a1
 10c:	fe055be3          	bgez	a0,102 <__modsi3+0xa>
 110:	40a00533          	neg	a0,a0
 114:	3f51                	jal	a8 <__hidden___udivsi3>
 116:	40b00533          	neg	a0,a1
 11a:	8282                	jr	t0
	...

0000011e <mini_pad>:
 11e:	1131                	addi	sp,sp,-20
 120:	c426                	sw	s1,8(sp)
 122:	c806                	sw	ra,16(sp)
 124:	c622                	sw	s0,12(sp)
 126:	84ae                	mv	s1,a1
 128:	87aa                	mv	a5,a0
 12a:	85b2                	mv	a1,a2
 12c:	c699                	beqz	a3,13a <mini_pad+0x1c>
 12e:	4301                	li	t1,0
 130:	0096d763          	bge	a3,s1,13e <mini_pad+0x20>
 134:	84b6                	mv	s1,a3
 136:	4305                	li	t1,1
 138:	a019                	j	13e <mini_pad+0x20>
 13a:	4301                	li	t1,0
 13c:	86a6                	mv	a3,s1
 13e:	40968433          	sub	s0,a3,s1
 142:	00045363          	bgez	s0,148 <mini_pad+0x2a>
 146:	4401                	li	s0,0
 148:	8622                	mv	a2,s0
 14a:	853a                	mv	a0,a4
 14c:	c23e                	sw	a5,4(sp)
 14e:	c01a                	sw	t1,0(sp)
 150:	2ba9                	jal	6aa <memset>
 152:	4302                	lw	t1,0(sp)
 154:	4792                	lw	a5,4(sp)
 156:	872a                	mv	a4,a0
 158:	008506b3          	add	a3,a0,s0
 15c:	4601                	li	a2,0
 15e:	40c485b3          	sub	a1,s1,a2
 162:	04b04263          	bgtz	a1,1a6 <mini_pad+0x88>
 166:	0004d363          	bgez	s1,16c <mini_pad+0x4e>
 16a:	4481                	li	s1,0
 16c:	009685b3          	add	a1,a3,s1
 170:	40e58533          	sub	a0,a1,a4
 174:	02030463          	beqz	t1,19c <mini_pad+0x7e>
 178:	02b77263          	bgeu	a4,a1,19c <mini_pad+0x7e>
 17c:	02a00793          	li	a5,42
 180:	fef58fa3          	sb	a5,-1(a1)
 184:	fff58693          	addi	a3,a1,-1
 188:	00d77a63          	bgeu	a4,a3,19c <mini_pad+0x7e>
 18c:	fef58f23          	sb	a5,-2(a1)
 190:	ffe58693          	addi	a3,a1,-2
 194:	00d77463          	bgeu	a4,a3,19c <mini_pad+0x7e>
 198:	fef58ea3          	sb	a5,-3(a1)
 19c:	40c2                	lw	ra,16(sp)
 19e:	4432                	lw	s0,12(sp)
 1a0:	44a2                	lw	s1,8(sp)
 1a2:	0151                	addi	sp,sp,20
 1a4:	8082                	ret
 1a6:	00c785b3          	add	a1,a5,a2
 1aa:	0005c503          	lbu	a0,0(a1)
 1ae:	00c685b3          	add	a1,a3,a2
 1b2:	0605                	addi	a2,a2,1
 1b4:	00a58023          	sb	a0,0(a1)
 1b8:	b75d                	j	15e <mini_pad+0x40>

000001ba <PrintHex>:
 1ba:	e00007b7          	lui	a5,0xe0000
 1be:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 1c2:	4398                	lw	a4,0(a5)
 1c4:	08077713          	andi	a4,a4,128
 1c8:	ff6d                	bnez	a4,1c2 <PrintHex+0x8>
 1ca:	78302737          	lui	a4,0x78302
 1ce:	08870713          	addi	a4,a4,136 # 78302088 <_eusrstack+0x58301888>
 1d2:	e00006b7          	lui	a3,0xe0000
 1d6:	c398                	sw	a4,0(a5)
 1d8:	0f468693          	addi	a3,a3,244 # e00000f4 <_eusrstack+0xbffff8f4>
 1dc:	4771                	li	a4,28
 1de:	4325                	li	t1,9
 1e0:	55f1                	li	a1,-4
 1e2:	429c                	lw	a5,0(a3)
 1e4:	0807f793          	andi	a5,a5,128
 1e8:	ffed                	bnez	a5,1e2 <PrintHex+0x28>
 1ea:	00e55633          	srl	a2,a0,a4
 1ee:	8a3d                	andi	a2,a2,15
 1f0:	05700793          	li	a5,87
 1f4:	00c36463          	bltu	t1,a2,1fc <PrintHex+0x42>
 1f8:	03000793          	li	a5,48
 1fc:	97b2                	add	a5,a5,a2
 1fe:	07a2                	slli	a5,a5,0x8
 200:	0857e793          	ori	a5,a5,133
 204:	c29c                	sw	a5,0(a3)
 206:	1771                	addi	a4,a4,-4
 208:	fcb71de3          	bne	a4,a1,1e2 <PrintHex+0x28>
 20c:	8082                	ret

0000020e <mini_itoa.part.0>:
 20e:	1101                	addi	sp,sp,-32
 210:	ce06                	sw	ra,28(sp)
 212:	cc22                	sw	s0,24(sp)
 214:	ca26                	sw	s1,20(sp)
 216:	c002                	sw	zero,0(sp)
 218:	832a                	mv	t1,a0
 21a:	00055763          	bgez	a0,228 <mini_itoa.part.0+0x1a>
 21e:	e689                	bnez	a3,228 <mini_itoa.part.0+0x1a>
 220:	4785                	li	a5,1
 222:	40a00333          	neg	t1,a0
 226:	c03e                	sw	a5,0(sp)
 228:	8a05                	andi	a2,a2,1
 22a:	06100413          	li	s0,97
 22e:	c219                	beqz	a2,234 <mini_itoa.part.0+0x26>
 230:	04100413          	li	s0,65
 234:	84ba                	mv	s1,a4
 236:	1459                	addi	s0,s0,-10
 238:	851a                	mv	a0,t1
 23a:	c83a                	sw	a4,16(sp)
 23c:	c21a                	sw	t1,4(sp)
 23e:	c62e                	sw	a1,12(sp)
 240:	c41a                	sw	t1,8(sp)
 242:	3d49                	jal	d4 <__umodsi3>
 244:	47a5                	li	a5,9
 246:	4322                	lw	t1,8(sp)
 248:	45b2                	lw	a1,12(sp)
 24a:	4742                	lw	a4,16(sp)
 24c:	0ff57693          	zext.b	a3,a0
 250:	06a7e163          	bltu	a5,a0,2b2 <mini_itoa.part.0+0xa4>
 254:	03068693          	addi	a3,a3,48
 258:	0ff6f693          	zext.b	a3,a3
 25c:	00148793          	addi	a5,s1,1
 260:	00d48023          	sb	a3,0(s1)
 264:	851a                	mv	a0,t1
 266:	c83a                	sw	a4,16(sp)
 268:	c63e                	sw	a5,12(sp)
 26a:	c42e                	sw	a1,8(sp)
 26c:	3d35                	jal	a8 <__hidden___udivsi3>
 26e:	4692                	lw	a3,4(sp)
 270:	45a2                	lw	a1,8(sp)
 272:	47b2                	lw	a5,12(sp)
 274:	4742                	lw	a4,16(sp)
 276:	832a                	mv	t1,a0
 278:	02b6fb63          	bgeu	a3,a1,2ae <mini_itoa.part.0+0xa0>
 27c:	4682                	lw	a3,0(sp)
 27e:	c699                	beqz	a3,28c <mini_itoa.part.0+0x7e>
 280:	02d00693          	li	a3,45
 284:	00d78023          	sb	a3,0(a5)
 288:	00248793          	addi	a5,s1,2
 28c:	40e78533          	sub	a0,a5,a4
 290:	01f55693          	srli	a3,a0,0x1f
 294:	96aa                	add	a3,a3,a0
 296:	00078023          	sb	zero,0(a5)
 29a:	8685                	srai	a3,a3,0x1
 29c:	4601                	li	a2,0
 29e:	17fd                	addi	a5,a5,-1
 2a0:	00d64b63          	blt	a2,a3,2b6 <mini_itoa.part.0+0xa8>
 2a4:	40f2                	lw	ra,28(sp)
 2a6:	4462                	lw	s0,24(sp)
 2a8:	44d2                	lw	s1,20(sp)
 2aa:	6105                	addi	sp,sp,32
 2ac:	8082                	ret
 2ae:	84be                	mv	s1,a5
 2b0:	b761                	j	238 <mini_itoa.part.0+0x2a>
 2b2:	96a2                	add	a3,a3,s0
 2b4:	b755                	j	258 <mini_itoa.part.0+0x4a>
 2b6:	00c705b3          	add	a1,a4,a2
 2ba:	0007c283          	lbu	t0,0(a5)
 2be:	0005c303          	lbu	t1,0(a1)
 2c2:	0605                	addi	a2,a2,1
 2c4:	00558023          	sb	t0,0(a1)
 2c8:	00678023          	sb	t1,0(a5)
 2cc:	bfc9                	j	29e <mini_itoa.part.0+0x90>

000002ce <flash_get_lock_state>:


flash_lock_state_t flash_get_lock_state(void)
{
	// If the LOCK bit is set, the flash is fully locked
	if(FLASH->CTLR & FLASH_CTLR_LOCK)   return FLASH_LS_LOCKED;
 2ce:	40022737          	lui	a4,0x40022
 2d2:	4b1c                	lw	a5,16(a4)
 2d4:	4501                	li	a0,0
 2d6:	0807f793          	andi	a5,a5,128
 2da:	e799                	bnez	a5,2e8 <flash_get_lock_state+0x1a>

	// If the FLOCK bit is set, the Flash is only SLOW mode unlocked
	if(FLASH->CTLR & FLASH_CTLR_FLOCK)  return FLASH_LS_UNLOCKED_NORM;
 2dc:	4b08                	lw	a0,16(a4)
 2de:	67a1                	lui	a5,0x8
 2e0:	8d7d                	and	a0,a0,a5

	// If neither flash is set, the flash is completely unlocked
	return FLASH_LS_UNLOCKED_FAST;
 2e2:	00153513          	seqz	a0,a0
 2e6:	0505                	addi	a0,a0,1
}
 2e8:	8082                	ret

000002ea <internal_handle_input.constprop.0>:
 2ea:	e00007b7          	lui	a5,0xe0000
 2ee:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 2f2:	439c                	lw	a5,0(a5)
 2f4:	8082                	ret

000002f6 <_write.constprop.0>:
 2f6:	1101                	addi	sp,sp,-32
 2f8:	cc22                	sw	s0,24(sp)
 2fa:	e0000437          	lui	s0,0xe0000
 2fe:	0f440413          	addi	s0,s0,244 # e00000f4 <_eusrstack+0xbffff8f4>
 302:	4018                	lw	a4,0(s0)
 304:	ce06                	sw	ra,28(sp)
 306:	ca26                	sw	s1,20(sp)
 308:	c02a                	sw	a0,0(sp)
 30a:	0c077713          	andi	a4,a4,192
 30e:	0c000693          	li	a3,192
 312:	00d70b63          	beq	a4,a3,328 <_write.constprop.0+0x32>
 316:	c802                	sw	zero,16(sp)
 318:	84ae                	mv	s1,a1
 31a:	e1e9                	bnez	a1,3dc <_write.constprop.0+0xe6>
 31c:	401c                	lw	a5,0(s0)
 31e:	c789                	beqz	a5,328 <_write.constprop.0+0x32>
 320:	0807f793          	andi	a5,a5,128
 324:	e391                	bnez	a5,328 <_write.constprop.0+0x32>
 326:	37d1                	jal	2ea <internal_handle_input.constprop.0>
 328:	4481                	li	s1,0
 32a:	40f2                	lw	ra,28(sp)
 32c:	4462                	lw	s0,24(sp)
 32e:	8526                	mv	a0,s1
 330:	44d2                	lw	s1,20(sp)
 332:	6105                	addi	sp,sp,32
 334:	8082                	ret
 336:	40e48633          	sub	a2,s1,a4
 33a:	459d                	li	a1,7
 33c:	86b2                	mv	a3,a2
 33e:	00c5d363          	bge	a1,a2,344 <_write.constprop.0+0x4e>
 342:	469d                	li	a3,7
 344:	000805b7          	lui	a1,0x80
 348:	0585                	addi	a1,a1,1 # 80001 <lib_flash.c.f1ba3d63+0x7dbc5>
 34a:	4008                	lw	a0,0(s0)
 34c:	08057313          	andi	t1,a0,128
 350:	06031f63          	bnez	t1,3ce <_write.constprop.0+0xd8>
 354:	c901                	beqz	a0,364 <_write.constprop.0+0x6e>
 356:	c636                	sw	a3,12(sp)
 358:	c432                	sw	a2,8(sp)
 35a:	c23a                	sw	a4,4(sp)
 35c:	3779                	jal	2ea <internal_handle_input.constprop.0>
 35e:	46b2                	lw	a3,12(sp)
 360:	4622                	lw	a2,8(sp)
 362:	4712                	lw	a4,4(sp)
 364:	00362593          	slti	a1,a2,3
 368:	4601                	li	a2,0
 36a:	e199                	bnez	a1,370 <_write.constprop.0+0x7a>
 36c:	ffd68613          	addi	a2,a3,-3
 370:	4782                	lw	a5,0(sp)
 372:	00370593          	addi	a1,a4,3 # 40022003 <_eusrstack+0x20021803>
 376:	0808                	addi	a0,sp,16
 378:	95be                	add	a1,a1,a5
 37a:	c436                	sw	a3,8(sp)
 37c:	c23a                	sw	a4,4(sp)
 37e:	2e3d                	jal	6bc <memcpy>
 380:	45c2                	lw	a1,16(sp)
 382:	4782                	lw	a5,0(sp)
 384:	4712                	lw	a4,4(sp)
 386:	e0000637          	lui	a2,0xe0000
 38a:	46a2                	lw	a3,8(sp)
 38c:	0f860613          	addi	a2,a2,248 # e00000f8 <_eusrstack+0xbffff8f8>
 390:	c20c                	sw	a1,0(a2)
 392:	450d                	li	a0,3
 394:	00e785b3          	add	a1,a5,a4
 398:	4601                	li	a2,0
 39a:	0005c283          	lbu	t0,0(a1)
 39e:	0605                	addi	a2,a2,1
 3a0:	01060793          	addi	a5,a2,16
 3a4:	00278333          	add	t1,a5,sp
 3a8:	00530023          	sb	t0,0(t1)
 3ac:	00c68563          	beq	a3,a2,3b6 <_write.constprop.0+0xc0>
 3b0:	0585                	addi	a1,a1,1
 3b2:	fea614e3          	bne	a2,a0,39a <_write.constprop.0+0xa4>
 3b6:	00468613          	addi	a2,a3,4
 3ba:	f8066613          	ori	a2,a2,-128
 3be:	00c10823          	sb	a2,16(sp)
 3c2:	4642                	lw	a2,16(sp)
 3c4:	9736                	add	a4,a4,a3
 3c6:	c010                	sw	a2,0(s0)
 3c8:	f69747e3          	blt	a4,s1,336 <_write.constprop.0+0x40>
 3cc:	bfb9                	j	32a <_write.constprop.0+0x34>
 3ce:	15fd                	addi	a1,a1,-1
 3d0:	fdad                	bnez	a1,34a <_write.constprop.0+0x54>
 3d2:	401c                	lw	a5,0(s0)
 3d4:	0c07e793          	ori	a5,a5,192
 3d8:	c01c                	sw	a5,0(s0)
 3da:	b7b9                	j	328 <_write.constprop.0+0x32>
 3dc:	4701                	li	a4,0
 3de:	b7ed                	j	3c8 <_write.constprop.0+0xd2>

000003e0 <__puts_uart>:
 3e0:	1151                	addi	sp,sp,-12
 3e2:	c222                	sw	s0,4(sp)
 3e4:	c406                	sw	ra,8(sp)
 3e6:	842e                	mv	s0,a1
 3e8:	3739                	jal	2f6 <_write.constprop.0>
 3ea:	40a2                	lw	ra,8(sp)
 3ec:	8522                	mv	a0,s0
 3ee:	4412                	lw	s0,4(sp)
 3f0:	0131                	addi	sp,sp,12
 3f2:	8082                	ret

000003f4 <handle_reset>:
 3f4:	20000197          	auipc	gp,0x20000
 3f8:	00818193          	addi	gp,gp,8 # 200003fc <__global_pointer$>
 3fc:	40418113          	addi	sp,gp,1028 # 20000800 <_eusrstack>
 400:	08000513          	li	a0,128
 404:	30051073          	csrw	mstatus,a0
 408:	468d                	li	a3,3
 40a:	00000517          	auipc	a0,0x0
 40e:	bf650513          	addi	a0,a0,-1034 # 0 <InterruptVector>
 412:	8d55                	or	a0,a0,a3
 414:	30551073          	csrw	mtvec,a0
 418:	c0418513          	addi	a0,gp,-1020 # 20000000 <_data_vma>
 41c:	c0418593          	addi	a1,gp,-1020 # 20000000 <_data_vma>
 420:	4601                	li	a2,0
 422:	00b55663          	bge	a0,a1,42e <handle_reset+0x3a>
 426:	c110                	sw	a2,0(a0)
 428:	0511                	addi	a0,a0,4
 42a:	feb54ee3          	blt	a0,a1,426 <handle_reset+0x32>
 42e:	00000517          	auipc	a0,0x0
 432:	4be50513          	addi	a0,a0,1214 # 8ec <_data_lma>
 436:	c0418593          	addi	a1,gp,-1020 # 20000000 <_data_vma>
 43a:	c0418613          	addi	a2,gp,-1020 # 20000000 <_data_vma>
 43e:	00c58863          	beq	a1,a2,44e <handle_reset+0x5a>
 442:	4114                	lw	a3,0(a0)
 444:	c194                	sw	a3,0(a1)
 446:	0511                	addi	a0,a0,4
 448:	0591                	addi	a1,a1,4
 44a:	fec59ae3          	bne	a1,a2,43e <handle_reset+0x4a>
 44e:	e000f7b7          	lui	a5,0xe000f
 452:	4715                	li	a4,5
 454:	c398                	sw	a4,0(a5)
 456:	4781                	li	a5,0
 458:	7ce00793          	li	a5,1998
 45c:	34179073          	csrw	mepc,a5
 460:	30200073          	mret

00000464 <ADC1_2_IRQHandler>:

// Return the Machine Exception Program Register (MEPC)
static inline uint32_t __get_MEPC(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mepc" : "=r"(result));
 464:	34102573          	csrr	a0,mepc
void DefaultIRQHandler( void )
{
#if FUNCONF_DEBUG_HARDFAULT && ( FUNCONF_USE_DEBUGPRINTF || FUNCONF_USE_UARTPRINTF )
	//This is kind of like a crash handler.
	//printf( "DEAD MSTATUS:%08x MTVAL:%08x MCAUSE:%08x MEPC:%08x\n", (int)__get_MSTATUS(), (int)__get_MTVAL(), (int)__get_MCAUSE(), (int)__get_MEPC() );
	PrintHex( __get_MEPC() ); // "addr2line -e debugprintfdemo.elf 0x000007e6" ---> debugprintfdemo.c:45
 468:	3b89                	jal	1ba <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0, mstatus": "=r"(result) );
 46a:	30002573          	csrr	a0,mstatus
	PrintHex( __get_MSTATUS() );
 46e:	33b1                	jal	1ba <PrintHex>

// Return the Machine Trap Value Register (MTVAL)
static inline uint32_t __get_MTVAL(void)
{
	uint32_t result;
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mtval" : "=r" (result) );
 470:	34302573          	csrr	a0,mtval
	PrintHex( __get_MTVAL() );
 474:	3399                	jal	1ba <PrintHex>
	__ASM volatile( ADD_ARCH_ZICSR "csrr %0," "mcause": "=r"(result));
 476:	34202573          	csrr	a0,mcause
	PrintHex( __get_MCAUSE() );
 47a:	3381                	jal	1ba <PrintHex>
#if FUNCONF_USE_DEBUGPRINTF
	while( (*DMDATA0) & 0x80 );
 47c:	e00007b7          	lui	a5,0xe0000
 480:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 484:	4398                	lw	a4,0(a5)
 486:	08077713          	andi	a4,a4,128
 48a:	ff6d                	bnez	a4,484 <ADC1_2_IRQHandler+0x20>
	*DMDATA0 = 0x0a85;
 48c:	6705                	lui	a4,0x1
 48e:	a8570713          	addi	a4,a4,-1403 # a85 <_data_lma+0x199>
 492:	c398                	sw	a4,0(a5)
	while( (*DMDATA0) & 0x80 );
 494:	e00007b7          	lui	a5,0xe0000
 498:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 49c:	4398                	lw	a4,0(a5)
 49e:	08077713          	andi	a4,a4,128
 4a2:	ff6d                	bnez	a4,49c <ADC1_2_IRQHandler+0x38>
	*DMDATA0 = 0xaaaaaa83;
 4a4:	aaaab737          	lui	a4,0xaaaab
 4a8:	a8370713          	addi	a4,a4,-1405 # aaaaaa83 <_eusrstack+0x8aaaa283>
 4ac:	c398                	sw	a4,0(a5)
	putchar( '\n' );
#endif
#endif
	//printf( "DEAD MSTATUS:%08x MTVAL:%08x MCAUSE:%08x MEPC:%08x\n", (int)__get_MSTATUS(), (int)__get_MTVAL(), (int)__get_MCAUSE(), (int)__get_MEPC() );
	// Infinite Loop
	asm volatile( "1: j 1b" );
 4ae:	a001                	j	4ae <ADC1_2_IRQHandler+0x4a>

000004b0 <NMI_Handler>:
 * 			The sys clock is switched to HSI.
 * 			Clears the CSSF flag in RCC->INTR
 */
void NMI_RCC_CSS_IRQHandler( void )
{
	RCC->INTR |= RCC_CSSC;	// clear the clock security int flag
 4b0:	40021737          	lui	a4,0x40021
 4b4:	471c                	lw	a5,8(a4)
 4b6:	008006b7          	lui	a3,0x800
 4ba:	8fd5                	or	a5,a5,a3
 4bc:	c71c                	sw	a5,8(a4)

000004be <strlen>:
 4be:	87aa                	mv	a5,a0
 4c0:	0007c703          	lbu	a4,0(a5)
 4c4:	e701                	bnez	a4,4cc <strlen+0xe>
 4c6:	40a78533          	sub	a0,a5,a0
 4ca:	8082                	ret
 4cc:	0785                	addi	a5,a5,1
 4ce:	bfcd                	j	4c0 <strlen+0x2>

000004d0 <mini_vpprintf>:
 4d0:	fa410113          	addi	sp,sp,-92
 4d4:	caa2                	sw	s0,84(sp)
 4d6:	c8a6                	sw	s1,80(sp)
 4d8:	cc86                	sw	ra,88(sp)
 4da:	c02a                	sw	a0,0(sp)
 4dc:	c22e                	sw	a1,4(sp)
 4de:	8432                	mv	s0,a2
 4e0:	84b6                	mv	s1,a3
 4e2:	ca02                	sw	zero,20(sp)
 4e4:	00044783          	lbu	a5,0(s0)
 4e8:	00140693          	addi	a3,s0,1
 4ec:	00f10fa3          	sb	a5,31(sp)
 4f0:	eb81                	bnez	a5,500 <mini_vpprintf+0x30>
 4f2:	40e6                	lw	ra,88(sp)
 4f4:	4456                	lw	s0,84(sp)
 4f6:	4552                	lw	a0,20(sp)
 4f8:	44c6                	lw	s1,80(sp)
 4fa:	05c10113          	addi	sp,sp,92
 4fe:	8082                	ret
 500:	c636                	sw	a3,12(sp)
 502:	02500713          	li	a4,37
 506:	02e78063          	beq	a5,a4,526 <mini_vpprintf+0x56>
 50a:	4612                	lw	a2,4(sp)
 50c:	4782                	lw	a5,0(sp)
 50e:	4585                	li	a1,1
 510:	01f10513          	addi	a0,sp,31
 514:	9782                	jalr	a5
 516:	46b2                	lw	a3,12(sp)
 518:	c426                	sw	s1,8(sp)
 51a:	8436                	mv	s0,a3
 51c:	47d2                	lw	a5,20(sp)
 51e:	44a2                	lw	s1,8(sp)
 520:	97aa                	add	a5,a5,a0
 522:	ca3e                	sw	a5,20(sp)
 524:	b7c1                	j	4e4 <mini_vpprintf+0x14>
 526:	00144703          	lbu	a4,1(s0)
 52a:	03000613          	li	a2,48
 52e:	03000693          	li	a3,48
 532:	00e10fa3          	sb	a4,31(sp)
 536:	c632                	sw	a2,12(sp)
 538:	00240793          	addi	a5,s0,2
 53c:	08d71263          	bne	a4,a3,5c0 <mini_vpprintf+0xf0>
 540:	843e                	mv	s0,a5
 542:	4681                	li	a3,0
 544:	4781                	li	a5,0
 546:	45a5                	li	a1,9
 548:	a811                	j	55c <mini_vpprintf+0x8c>
 54a:	00279713          	slli	a4,a5,0x2
 54e:	0405                	addi	s0,s0,1
 550:	97ba                	add	a5,a5,a4
 552:	fff44703          	lbu	a4,-1(s0)
 556:	0786                	slli	a5,a5,0x1
 558:	97b2                	add	a5,a5,a2
 55a:	4685                	li	a3,1
 55c:	fd070613          	addi	a2,a4,-48 # 40020fd0 <_eusrstack+0x200207d0>
 560:	0ff67513          	zext.b	a0,a2
 564:	fea5f3e3          	bgeu	a1,a0,54a <mini_vpprintf+0x7a>
 568:	c299                	beqz	a3,56e <mini_vpprintf+0x9e>
 56a:	00e10fa3          	sb	a4,31(sp)
 56e:	c83e                	sw	a5,16(sp)
 570:	46e1                	li	a3,24
 572:	00f6d363          	bge	a3,a5,578 <mini_vpprintf+0xa8>
 576:	c836                	sw	a3,16(sp)
 578:	06c00613          	li	a2,108
 57c:	4681                	li	a3,0
 57e:	00c71863          	bne	a4,a2,58e <mini_vpprintf+0xbe>
 582:	00044703          	lbu	a4,0(s0)
 586:	4685                	li	a3,1
 588:	0405                	addi	s0,s0,1
 58a:	00e10fa3          	sb	a4,31(sp)
 58e:	01f14603          	lbu	a2,31(sp)
 592:	06400713          	li	a4,100
 596:	06e60563          	beq	a2,a4,600 <mini_vpprintf+0x130>
 59a:	02c76763          	bltu	a4,a2,5c8 <mini_vpprintf+0xf8>
 59e:	05800793          	li	a5,88
 5a2:	0af60063          	beq	a2,a5,642 <mini_vpprintf+0x172>
 5a6:	06300793          	li	a5,99
 5aa:	0af60d63          	beq	a2,a5,664 <mini_vpprintf+0x194>
 5ae:	d231                	beqz	a2,4f2 <mini_vpprintf+0x22>
 5b0:	4612                	lw	a2,4(sp)
 5b2:	4782                	lw	a5,0(sp)
 5b4:	4585                	li	a1,1
 5b6:	01f10513          	addi	a0,sp,31
 5ba:	9782                	jalr	a5
 5bc:	c426                	sw	s1,8(sp)
 5be:	bfb9                	j	51c <mini_vpprintf+0x4c>
 5c0:	02000693          	li	a3,32
 5c4:	c636                	sw	a3,12(sp)
 5c6:	bfad                	j	540 <mini_vpprintf+0x70>
 5c8:	07500713          	li	a4,117
 5cc:	02e60a63          	beq	a2,a4,600 <mini_vpprintf+0x130>
 5d0:	07800713          	li	a4,120
 5d4:	06e60763          	beq	a2,a4,642 <mini_vpprintf+0x172>
 5d8:	07300713          	li	a4,115
 5dc:	fce61ae3          	bne	a2,a4,5b0 <mini_vpprintf+0xe0>
 5e0:	cc3e                	sw	a5,24(sp)
 5e2:	00448793          	addi	a5,s1,4
 5e6:	4084                	lw	s1,0(s1)
 5e8:	c43e                	sw	a5,8(sp)
 5ea:	8526                	mv	a0,s1
 5ec:	3dc9                	jal	4be <strlen>
 5ee:	47e2                	lw	a5,24(sp)
 5f0:	85aa                	mv	a1,a0
 5f2:	08f05663          	blez	a5,67e <mini_vpprintf+0x1ae>
 5f6:	46c2                	lw	a3,16(sp)
 5f8:	4632                	lw	a2,12(sp)
 5fa:	1838                	addi	a4,sp,56
 5fc:	8526                	mv	a0,s1
 5fe:	a01d                	j	624 <mini_vpprintf+0x154>
 600:	00448793          	addi	a5,s1,4
 604:	c43e                	sw	a5,8(sp)
 606:	c695                	beqz	a3,632 <mini_vpprintf+0x162>
 608:	f8b60613          	addi	a2,a2,-117
 60c:	1018                	addi	a4,sp,32
 60e:	00163693          	seqz	a3,a2
 612:	4088                	lw	a0,0(s1)
 614:	4601                	li	a2,0
 616:	45a9                	li	a1,10
 618:	3edd                	jal	20e <mini_itoa.part.0>
 61a:	46c2                	lw	a3,16(sp)
 61c:	4632                	lw	a2,12(sp)
 61e:	1838                	addi	a4,sp,56
 620:	85aa                	mv	a1,a0
 622:	1008                	addi	a0,sp,32
 624:	3ced                	jal	11e <mini_pad>
 626:	4612                	lw	a2,4(sp)
 628:	85aa                	mv	a1,a0
 62a:	1828                	addi	a0,sp,56
 62c:	4782                	lw	a5,0(sp)
 62e:	9782                	jalr	a5
 630:	b5f5                	j	51c <mini_vpprintf+0x4c>
 632:	07500793          	li	a5,117
 636:	1018                	addi	a4,sp,32
 638:	4685                	li	a3,1
 63a:	fcf60ce3          	beq	a2,a5,612 <mini_vpprintf+0x142>
 63e:	4681                	li	a3,0
 640:	bfc9                	j	612 <mini_vpprintf+0x142>
 642:	4088                	lw	a0,0(s1)
 644:	fa860613          	addi	a2,a2,-88
 648:	00448793          	addi	a5,s1,4
 64c:	1018                	addi	a4,sp,32
 64e:	4685                	li	a3,1
 650:	00163613          	seqz	a2,a2
 654:	45c1                	li	a1,16
 656:	c43e                	sw	a5,8(sp)
 658:	3e5d                	jal	20e <mini_itoa.part.0>
 65a:	46c2                	lw	a3,16(sp)
 65c:	4632                	lw	a2,12(sp)
 65e:	85aa                	mv	a1,a0
 660:	1838                	addi	a4,sp,56
 662:	b7c1                	j	622 <mini_vpprintf+0x152>
 664:	00448793          	addi	a5,s1,4
 668:	c43e                	sw	a5,8(sp)
 66a:	409c                	lw	a5,0(s1)
 66c:	46c2                	lw	a3,16(sp)
 66e:	4632                	lw	a2,12(sp)
 670:	00f10fa3          	sb	a5,31(sp)
 674:	1838                	addi	a4,sp,56
 676:	4585                	li	a1,1
 678:	01f10513          	addi	a0,sp,31
 67c:	b765                	j	624 <mini_vpprintf+0x154>
 67e:	4612                	lw	a2,4(sp)
 680:	8526                	mv	a0,s1
 682:	b76d                	j	62c <mini_vpprintf+0x15c>

00000684 <printf>:
 684:	fdc10113          	addi	sp,sp,-36
 688:	ca32                	sw	a2,20(sp)
 68a:	862a                	mv	a2,a0
 68c:	c82e                	sw	a1,16(sp)
 68e:	cc36                	sw	a3,24(sp)
 690:	4581                	li	a1,0
 692:	0814                	addi	a3,sp,16
 694:	3e000513          	li	a0,992
 698:	c606                	sw	ra,12(sp)
 69a:	ce3a                	sw	a4,28(sp)
 69c:	d03e                	sw	a5,32(sp)
 69e:	c036                	sw	a3,0(sp)
 6a0:	3d05                	jal	4d0 <mini_vpprintf>
 6a2:	40b2                	lw	ra,12(sp)
 6a4:	02410113          	addi	sp,sp,36
 6a8:	8082                	ret

000006aa <memset>:
 6aa:	962a                	add	a2,a2,a0
 6ac:	87aa                	mv	a5,a0
 6ae:	00c79363          	bne	a5,a2,6b4 <memset+0xa>
 6b2:	8082                	ret
 6b4:	00b78023          	sb	a1,0(a5)
 6b8:	0785                	addi	a5,a5,1
 6ba:	bfd5                	j	6ae <memset+0x4>

000006bc <memcpy>:
 6bc:	4781                	li	a5,0
 6be:	00f61363          	bne	a2,a5,6c4 <memcpy+0x8>
 6c2:	8082                	ret
 6c4:	00f58733          	add	a4,a1,a5
 6c8:	00074683          	lbu	a3,0(a4)
 6cc:	00f50733          	add	a4,a0,a5
 6d0:	0785                	addi	a5,a5,1
 6d2:	00d70023          	sb	a3,0(a4)
 6d6:	b7e5                	j	6be <memcpy+0x2>

000006d8 <puts>:
 6d8:	1151                	addi	sp,sp,-12
 6da:	c406                	sw	ra,8(sp)
 6dc:	c222                	sw	s0,4(sp)
 6de:	c026                	sw	s1,0(sp)
 6e0:	84aa                	mv	s1,a0
 6e2:	3bf1                	jal	4be <strlen>
 6e4:	842a                	mv	s0,a0
 6e6:	85aa                	mv	a1,a0
 6e8:	8526                	mv	a0,s1
 6ea:	3131                	jal	2f6 <_write.constprop.0>
 6ec:	6505                	lui	a0,0x1
 6ee:	4585                	li	a1,1
 6f0:	8b050513          	addi	a0,a0,-1872 # 8b0 <main+0xe2>
 6f4:	3109                	jal	2f6 <_write.constprop.0>
 6f6:	40a2                	lw	ra,8(sp)
 6f8:	00140513          	addi	a0,s0,1
 6fc:	4412                	lw	s0,4(sp)
 6fe:	4482                	lw	s1,0(sp)
 700:	0131                	addi	sp,sp,12
 702:	8082                	ret

00000704 <putchar>:
 704:	e00007b7          	lui	a5,0xe0000
 708:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 70c:	4398                	lw	a4,0(a5)
 70e:	0c000693          	li	a3,192
 712:	0c077713          	andi	a4,a4,192
 716:	04d70963          	beq	a4,a3,768 <putchar+0x64>
 71a:	1151                	addi	sp,sp,-12
 71c:	00080737          	lui	a4,0x80
 720:	c222                	sw	s0,4(sp)
 722:	c406                	sw	ra,8(sp)
 724:	842a                	mv	s0,a0
 726:	0705                	addi	a4,a4,1 # 80001 <lib_flash.c.f1ba3d63+0x7dbc5>
 728:	4394                	lw	a3,0(a5)
 72a:	0806f613          	andi	a2,a3,128
 72e:	e215                	bnez	a2,752 <putchar+0x4e>
 730:	c291                	beqz	a3,734 <putchar+0x30>
 732:	3e65                	jal	2ea <internal_handle_input.constprop.0>
 734:	6741                	lui	a4,0x10
 736:	f0070713          	addi	a4,a4,-256 # ff00 <lib_flash.c.f1ba3d63+0xdac4>
 73a:	00841793          	slli	a5,s0,0x8
 73e:	8ff9                	and	a5,a5,a4
 740:	e0000737          	lui	a4,0xe0000
 744:	0857e793          	ori	a5,a5,133
 748:	0f470713          	addi	a4,a4,244 # e00000f4 <_eusrstack+0xbffff8f4>
 74c:	c31c                	sw	a5,0(a4)
 74e:	4505                	li	a0,1
 750:	a801                	j	760 <putchar+0x5c>
 752:	177d                	addi	a4,a4,-1
 754:	fb71                	bnez	a4,728 <putchar+0x24>
 756:	4398                	lw	a4,0(a5)
 758:	4501                	li	a0,0
 75a:	0c076713          	ori	a4,a4,192
 75e:	c398                	sw	a4,0(a5)
 760:	40a2                	lw	ra,8(sp)
 762:	4412                	lw	s0,4(sp)
 764:	0131                	addi	sp,sp,12
 766:	8082                	ret
 768:	4501                	li	a0,0
 76a:	8082                	ret

0000076c <SystemInit>:
 76c:	400227b7          	lui	a5,0x40022
 770:	4705                	li	a4,1
 772:	c398                	sw	a4,0(a5)
 774:	400217b7          	lui	a5,0x40021
 778:	01080737          	lui	a4,0x1080
 77c:	0007a223          	sw	zero,4(a5) # 40021004 <_eusrstack+0x20020804>
 780:	08170713          	addi	a4,a4,129 # 1080081 <lib_flash.c.f1ba3d63+0x107dc45>
 784:	c398                	sw	a4,0(a5)
 786:	009f0737          	lui	a4,0x9f0
 78a:	c798                	sw	a4,8(a5)
 78c:	40021737          	lui	a4,0x40021
 790:	431c                	lw	a5,0(a4)
 792:	00679693          	slli	a3,a5,0x6
 796:	fe06dde3          	bgez	a3,790 <SystemInit+0x24>
 79a:	435c                	lw	a5,4(a4)
 79c:	400216b7          	lui	a3,0x40021
 7a0:	9bf1                	andi	a5,a5,-4
 7a2:	0027e793          	ori	a5,a5,2
 7a6:	c35c                	sw	a5,4(a4)
 7a8:	4721                	li	a4,8
 7aa:	42dc                	lw	a5,4(a3)
 7ac:	8bb1                	andi	a5,a5,12
 7ae:	fee79ee3          	bne	a5,a4,7aa <SystemInit+0x3e>
 7b2:	e00007b7          	lui	a5,0xe0000
 7b6:	0f878793          	addi	a5,a5,248 # e00000f8 <_eusrstack+0xbffff8f8>
 7ba:	0007a023          	sw	zero,0(a5)
 7be:	e00007b7          	lui	a5,0xe0000
 7c2:	0f478793          	addi	a5,a5,244 # e00000f4 <_eusrstack+0xbffff8f4>
 7c6:	08000713          	li	a4,128
 7ca:	c398                	sw	a4,0(a5)
 7cc:	8082                	ret

000007ce <main>:
}


/*** Main ********************************************************************/
int main() 
{
 7ce:	715d                	addi	sp,sp,-80
 7d0:	c686                	sw	ra,76(sp)
 7d2:	c4a2                	sw	s0,72(sp)
 7d4:	c2a6                	sw	s1,68(sp)
	SystemInit();
 7d6:	3f59                	jal	76c <SystemInit>

flash_err_t flash_unlock(void)
{
	flash_err_t ret = FLASH_OK;
	// If the flash is already unlocked, return OK
	if(flash_get_lock_state() != FLASH_LS_UNLOCKED_FAST)
 7d8:	3cdd                	jal	2ce <flash_get_lock_state>
 7da:	4789                	li	a5,2
 7dc:	04f50663          	beq	a0,a5,828 <main+0x5a>
	{
		// Normal Mode Unlock
		FLASH->KEYR = FLASH_KEY1;
 7e0:	456707b7          	lui	a5,0x45670
 7e4:	40022737          	lui	a4,0x40022
 7e8:	12378793          	addi	a5,a5,291 # 45670123 <_eusrstack+0x2566f923>
 7ec:	c35c                	sw	a5,4(a4)
		FLASH->KEYR = FLASH_KEY2;
 7ee:	cdef97b7          	lui	a5,0xcdef9
 7f2:	9ab78793          	addi	a5,a5,-1621 # cdef89ab <_eusrstack+0xadef81ab>
 7f6:	c35c                	sw	a5,4(a4)
		// Wait for the Flash to finish
		while(FLASH->STATR & FLASH_STATR_BSY);
 7f8:	400227b7          	lui	a5,0x40022
 7fc:	47d8                	lw	a4,12(a5)
 7fe:	8b05                	andi	a4,a4,1
 800:	ff75                	bnez	a4,7fc <main+0x2e>

		// FAST Mode Unlock
		FLASH->MODEKEYR = FLASH_KEY1;
 802:	45670737          	lui	a4,0x45670
 806:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566f923>
 80a:	d3d8                	sw	a4,36(a5)
		FLASH->MODEKEYR = FLASH_KEY2;
 80c:	cdef9737          	lui	a4,0xcdef9
 810:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef81ab>
 814:	d3d8                	sw	a4,36(a5)
		// Wait for the Flash to finish
		while(FLASH->STATR & FLASH_STATR_BSY);
 816:	40022737          	lui	a4,0x40022
 81a:	475c                	lw	a5,12(a4)
 81c:	8b85                	andi	a5,a5,1
 81e:	fff5                	bnez	a5,81a <main+0x4c>

		// If the flash is NOT in UNLOCKED_FAST mode, return an error
		if(flash_get_lock_state() != FLASH_LS_UNLOCKED_FAST)
 820:	347d                	jal	2ce <flash_get_lock_state>
 822:	4789                	li	a5,2
 824:	06f51b63          	bne	a0,a5,89a <main+0xcc>
{
	if(page_num > FLASH_MAX_PAGE)
		return FLASH_ERR_PAGE_OUT_OF_RANGE;

	// Calculate the flash address
	FLASH->ADDR = FLASH_BASE + (page_num * FLASH_PAGE_SIZE);
 828:	080047b7          	lui	a5,0x8004
 82c:	40022737          	lui	a4,0x40022
 830:	fc078793          	addi	a5,a5,-64 # 8003fc0 <lib_flash.c.f1ba3d63+0x8001b84>
 834:	cb5c                	sw	a5,20(a4)

	// Erase
	FLASH->CTLR = CR_STRT_Set | CR_PAGE_ER;
 836:	000207b7          	lui	a5,0x20
 83a:	04078793          	addi	a5,a5,64 # 20040 <lib_flash.c.f1ba3d63+0x1dc04>
 83e:	cb1c                	sw	a5,16(a4)

	// Wait for the operation to finish
	while(FLASH->STATR & FLASH_STATR_BSY);
 840:	475c                	lw	a5,12(a4)
 842:	8b85                	andi	a5,a5,1
 844:	fff5                	bnez	a5,840 <main+0x72>
	memcpy(page_ptr->byte, fp, sizeof(page_ptr->byte));
 846:	080045b7          	lui	a1,0x8004
 84a:	04000613          	li	a2,64
 84e:	fc058593          	addi	a1,a1,-64 # 8003fc0 <lib_flash.c.f1ba3d63+0x8001b84>
 852:	0048                	addi	a0,sp,4
 854:	35a5                	jal	6bc <memcpy>
	// Create a flash page, then read in data from the 255th page
	flash_page_t page = {0};
	flash_read_page(255, &page);

	// Print the page data
	printf("\n\nBytes @ Page 255:\n");
 856:	6505                	lui	a0,0x1
 858:	8d050513          	addi	a0,a0,-1840 # 8d0 <main+0x102>
 85c:	3db5                	jal	6d8 <puts>
	size_t row = 0;
 85e:	4781                	li	a5,0
	for(size_t b = 0; b < sizeof(page_ptr->byte); b++)
 860:	4401                	li	s0,0
		printf("%02X  ", page_ptr->byte[b]);
 862:	6485                	lui	s1,0x1
 864:	c03e                	sw	a5,0(sp)
 866:	00440793          	addi	a5,s0,4
 86a:	00278733          	add	a4,a5,sp
 86e:	00074583          	lbu	a1,0(a4) # 40022000 <_eusrstack+0x20021800>
 872:	8e448513          	addi	a0,s1,-1820 # 8e4 <main+0x116>
 876:	3539                	jal	684 <printf>
		if(row++ == 15) { printf("\n"); row = 0; }
 878:	4782                	lw	a5,0(sp)
 87a:	46bd                	li	a3,15
 87c:	00178713          	addi	a4,a5,1
 880:	00d79b63          	bne	a5,a3,896 <main+0xc8>
 884:	4529                	li	a0,10
 886:	3dbd                	jal	704 <putchar>
 888:	4781                	li	a5,0
	for(size_t b = 0; b < sizeof(page_ptr->byte); b++)
 88a:	0405                	addi	s0,s0,1
 88c:	04000713          	li	a4,64
 890:	fce41ae3          	bne	s0,a4,864 <main+0x96>
	flash_print_page(&page);



	while(1)
 894:	a001                	j	894 <main+0xc6>
		if(row++ == 15) { printf("\n"); row = 0; }
 896:	87ba                	mv	a5,a4
 898:	bfcd                	j	88a <main+0xbc>
		printf("Error: Flash Unlock Failed.\n"); 
 89a:	6505                	lui	a0,0x1
 89c:	8b450513          	addi	a0,a0,-1868 # 8b4 <main+0xe6>
 8a0:	3d25                	jal	6d8 <puts>
	{

	}
}
 8a2:	40b6                	lw	ra,76(sp)
 8a4:	4426                	lw	s0,72(sp)
 8a6:	4496                	lw	s1,68(sp)
 8a8:	557d                	li	a0,-1
 8aa:	6161                	addi	sp,sp,80
 8ac:	8082                	ret
 8ae:	0000                	unimp
 8b0:	000a                	c.slli	zero,0x2
 8b2:	0000                	unimp
 8b4:	7245                	lui	tp,0xffff1
 8b6:	6f72                	.insn	2, 0x6f72
 8b8:	3a72                	.insn	2, 0x3a72
 8ba:	4620                	lw	s0,72(a2)
 8bc:	616c                	.insn	2, 0x616c
 8be:	55206873          	csrrsi	a6,0x552,0
 8c2:	6c6e                	.insn	2, 0x6c6e
 8c4:	206b636f          	jal	t1,b6aca <lib_flash.c.f1ba3d63+0xb468e>
 8c8:	6146                	.insn	2, 0x6146
 8ca:	6c69                	lui	s8,0x1a
 8cc:	6465                	lui	s0,0x19
 8ce:	002e                	c.slli	zero,0xb
 8d0:	0a0a                	slli	s4,s4,0x2
 8d2:	7942                	.insn	2, 0x7942
 8d4:	6574                	.insn	2, 0x6574
 8d6:	20402073          	csrr	zero,vsie
 8da:	6150                	.insn	2, 0x6150
 8dc:	32206567          	.insn	4, 0x32206567
 8e0:	3535                	jal	70c <putchar+0x8>
 8e2:	003a                	c.slli	zero,0xe
 8e4:	3025                	jal	10c <__modsi3+0x14>
 8e6:	5832                	lw	a6,44(sp)
 8e8:	2020                	.insn	2, 0x2020
	...
